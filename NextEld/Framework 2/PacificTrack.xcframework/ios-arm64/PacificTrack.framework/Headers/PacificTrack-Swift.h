#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef PACIFICTRACK_SWIFT_H
#define PACIFICTRACK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PacificTrack",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC12PacificTrack11BaseCommand")
@interface BaseCommand : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Bus types
typedef SWIFT_ENUM(NSInteger, Bus, open) {
/// OBD-II
  BusObd2 = 0,
/// J1708
  BusJ1708 = 1,
/// J1939
  BusJ1939 = 2,
};

/// Bus Type
typedef SWIFT_ENUM(NSInteger, BusType, open) {
/// Bus not detected
  BusTypeNotDetected = 0,
/// OBD-II
  BusTypeObd2 = 1,
/// J1708
  BusTypeJ1708 = 2,
/// J1939
  BusTypeJ1939 = 4,
};

@class NSString;

/// Used by the framework for validating and parsing requests and responses.
SWIFT_CLASS("_TtC12PacificTrack12ControlFrame")
@interface ControlFrame : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum ResponseStatus : NSInteger;

/// Tracker Clear DTC response.
SWIFT_CLASS("_TtC12PacificTrack16ClearDTCResponse")
@interface ClearDTCResponse : ControlFrame
/// Status
@property (nonatomic, readonly) enum ResponseStatus status;
@end


/// Clear Stored Events response
SWIFT_CLASS("_TtC12PacificTrack25ClearStoredEventsResponse")
@interface ClearStoredEventsResponse : ControlFrame
/// Status
@property (nonatomic, readonly) enum ResponseStatus status;
@end


SWIFT_CLASS("_TtC12PacificTrack32ConfigureVirtualDashboardRequest")
@interface ConfigureVirtualDashboardRequest : ControlFrame
@end






/// DTC Error Codes parameter.
SWIFT_CLASS("_TtC12PacificTrack13DTCErrorCodes")
@interface DTCErrorCodes : NSObject
/// Indicates the version of the format of this tag
@property (nonatomic, readonly) NSInteger version;
/// Indicates if the mil is ON(true) or OFF(false)
@property (nonatomic, readonly) BOOL mil;
/// Bus Type
@property (nonatomic, readonly) enum BusType bus;
/// Number of DTC codes that are returned
@property (nonatomic, readonly) NSInteger number;
/// List of DTC codes (only present when number is not zero)
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull codes;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum EventType : NSInteger;
@class NSDate;
@class GeolocationParam;

/// Event frame notification.
SWIFT_CLASS("_TtC12PacificTrack10EventFrame")
@interface EventFrame : ControlFrame
/// Event number of that day.
@property (nonatomic, readonly) NSInteger sequenceNumber;
/// Event type.
@property (nonatomic) enum EventType eventType;
/// Date and time (UTC) when the event occurred.
/// <h3>Swift Usage Example (local system time):</h3>
/// \code
/// let formatter = DateFormatter()
/// formatter.dateFormat = "MM-dd-yyyy HH:mm:ss"
/// // no timeZone specified means convert UTC to system time zone
/// // so if iOS device is in PDT string will display event time and date
/// // in PDT time zone
/// let dateString = formatter.string(from: event.datetime)
///
/// \endcode<h3>Swift Usage Example (UTC time):</h3>
/// \code
/// let formatter = DateFormatter()
/// formatter.dateFormat = "MM-dd-yyyy HH:mm:ss"
/// // UTC time zone specified - string will display event
/// // time and date in UTC time zone
/// formatter.timeZone = TimeZone(abbreviation: "UTC")
/// let dateString = formatter.string(from: event.datetime)
///
/// \endcode<h3>Objective-C Usage Example (local system time):</h3>
/// \code
/// NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
/// [formatter setDateFormat:@"MM-dd-yyyy HH:mm:ss"];
/// // systemTimeZone means convert UTC to system time zone
/// // so if iOS device is in PDT string will display event time and date
/// // in PDT time zone
/// formatter.timeZone = [NSTimeZone systemTimeZone];
/// NSString *dateStr= [formatter stringFromDate:event.datetime];
///
/// \endcode<h3>Objective-C Usage Example (UTC time):</h3>
/// \code
/// NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
/// [formatter setDateFormat:@"MM-dd-yyyy HH:mm:ss"];
/// // UTC time zone specified - string will display event
/// // time and date in UTC time zone
/// formatter.timeZone = [NSTimeZone timeZoneWithName:@"UTC"];
/// NSString *dateStr= [formatter stringFromDate:event.datetime];
///
/// \endcode
@property (nonatomic, readonly, copy) NSDate * _Nonnull datetime;
/// Geolocation parameter.
@property (nonatomic, readonly, strong) GeolocationParam * _Nonnull geolocation;
/// Distance traveled.
@property (nonatomic, readonly) float odometer;
/// Speed in km/h.
@property (nonatomic, readonly) NSInteger velocity;
/// Engine hours.
@property (nonatomic, readonly) float engineHours;
/// Engine RPM.
@property (nonatomic, readonly) NSInteger rpm;
/// Live event (false if history event), PT30 specific
@property (nonatomic, readonly) BOOL liveEvent;
/// Indicates if the device is plugged into an OBD-II bus.
@property (nonatomic, readonly) BOOL obd2Present;
/// When <code>obd2Present</code> is <code>true</code>, it indicates that the device is plugged into an OBD-II bus.
/// <code>obd2Value</code> is a bit mapped field sent as a <code>UInt</code>. <code>obd2Value</code> should be used when coding in Objective-C, and if you use Swift use <code>obd2</code>.
/// <h3>PT40</h3>
/// <em>Bit0</em>: 0 - odometer value started at zero, 1 - odometer is true
/// <h3>PT30</h3>
/// <em>Bit0</em>: 1 - Always set
/// <em>Bit1</em>: 0 - odometer is based on Bit2, 1 - odometer is <code>true</code>
/// <em>Bit2</em>: 0 - MIL is off, odometer is the distance traveled since codes cleared,
/// 1 - MIL is on, odometer is the Distance traveled with MIL on
@property (nonatomic, readonly) NSUInteger obd2Value;
/// This value indicates if the age of the engine data is present.
@property (nonatomic, readonly) BOOL engineAgePresent;
/// This value indicates the age of the engine data when <code>engineAgePresent</code> is <code>true</code>
/// <code>engineAgeValue</code> should be used when coding in Objective-C, and if you use Swift use <code>engineAge</code>.
/// <em>value</em>: 0 to 999 (seconds)
@property (nonatomic, readonly) NSUInteger engineAgeValue;
/// Returns a <code>String</code> value for specified tag, or <code>nil</code> if the tag doesn’t exist or have value.
/// <h3>Swift Usage Example:</h3>
/// \code
/// let sequenceNumber = event.getValue(forTag: "N")
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// NSString * _Nullable sequenceNumber = [event getValueForTag:@"N"];
///
/// \endcode
- (NSString * _Nullable)getValueForTag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
@end

/// Defines all possible <code>EventFrame</code> event types.
typedef SWIFT_ENUM(NSInteger, EventType, open) {
/// Device turned on, GPS locked.
  EventTypePowerOn = 0,
/// Device turned off (only available with backup battery option).
  EventTypePowerOff = 1,
/// Ignition switched on (only valid if Ignition is wired).
  EventTypeIgnitionOn = 2,
/// Ignition switched off (only valid if Ignition is wired).
  EventTypeIgnitionOff = 3,
/// Engine Turned On.
  EventTypeEngineOn = 4,
/// Engine Turned Off.
  EventTypeEngineOff = 5,
/// Vehicle transitioned state from stopped to moving.
  EventTypeTripStart = 6,
/// Vehicle transitioned state from moving to stopped.
  EventTypeTripStop = 7,
/// Periodic report, no state change.
  EventTypePeriodic = 8,
/// Bluetooth Connected
  EventTypeBluetoothConnected = 9,
/// Bluetooth Disconnected
  EventTypeBluetoothDisconnected = 10,
/// BUS connected
  EventTypeBusConnected = 11,
/// BUS disconnected
  EventTypeBusDisconnected = 12,
/// Harsh accelerating
  EventTypeHarshAccelerating = 13,
/// Harsh braking
  EventTypeHarshBraking = 14,
/// Harsh cornering/swerving
  EventTypeHarshCornering = 15,
};


/// Geolocation parameter.
SWIFT_CLASS("_TtC12PacificTrack16GeolocationParam")
@interface GeolocationParam : NSObject
/// <code>true</code> if tracker has acquired and locked a GPS singal, <code>false</code> otherwise.
@property (nonatomic, readonly) BOOL isLocked;
/// Satelite count.
@property (nonatomic, readonly) NSInteger sateliteCount;
/// Latitude in degrees.
@property (nonatomic, readonly) float latitude;
/// Longitude in degrees.
@property (nonatomic, readonly) float longitude;
/// Speed in knots as reported by GPS.
@property (nonatomic, readonly) NSInteger speed;
/// Heading in degrees.
@property (nonatomic, readonly) NSInteger heading;
/// dop
@property (nonatomic, readonly) float dop;
/// This value indicates if the GPS age is present.
@property (nonatomic) BOOL gpsAgePresent;
/// This value indicates the age of the GPS fix in seconds when <code>gpsAgePresent</code> is <code>true</code>
/// <code>gpsAgeValue</code> should be used when coding in Objective-C, and if you use Swift use <code>gpsAge</code>.
@property (nonatomic) NSUInteger gpsAgeValue;
/// Returns a <code>String</code> array of all geolocation components sent from tracker.
- (NSArray<NSString *> * _Nonnull)getComponents SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Tracker Get DTC response.
SWIFT_CLASS("_TtC12PacificTrack14GetDTCResponse")
@interface GetDTCResponse : ControlFrame
/// Status
@property (nonatomic, readonly) enum ResponseStatus status;
/// Error Codes (DTC)
@property (nonatomic, readonly, strong) DTCErrorCodes * _Nonnull errorCodes;
@end

@class VersionParam;

/// Tracker information response.
SWIFT_CLASS("_TtC12PacificTrack22GetInformationResponse")
@interface GetInformationResponse : ControlFrame
/// Tracker’s response status
@property (nonatomic, readonly) enum ResponseStatus status;
/// Tracker’s product name
@property (nonatomic, readonly, copy) NSString * _Nonnull productName;
/// Tracker’s main version
@property (nonatomic, readonly, strong) VersionParam * _Nonnull mainVersion;
/// Tracker’s BLE Version
@property (nonatomic, readonly, strong) VersionParam * _Nonnull bleVersion;
/// VIN (PT30 only)
@property (nonatomic, readonly, copy) NSString * _Nullable vin;
/// IMEI (PT40 only)
@property (nonatomic, readonly, copy) NSString * _Nullable imei;
/// Tracker’s serial number
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
@end


/// Tracker current status response.
SWIFT_CLASS("_TtC12PacificTrack17GetStatusResponse")
@interface GetStatusResponse : ControlFrame
/// Status
@property (nonatomic, readonly) enum ResponseStatus status;
/// Event number of that day.
@property (nonatomic, readonly) NSInteger sequenceNumber;
/// Event type.
@property (nonatomic) enum EventType eventType;
/// Date and time when the event occurred.
@property (nonatomic, readonly, copy) NSDate * _Nonnull datetime;
/// Geolocation parameter.
@property (nonatomic, readonly, strong) GeolocationParam * _Nonnull geolocation;
/// Distance traveled.
@property (nonatomic, readonly) float odometer;
/// Speed in km/h.
@property (nonatomic, readonly) NSInteger velocity;
/// Engine hours.
@property (nonatomic, readonly) float engineHours;
/// Engine RPM.
@property (nonatomic, readonly) NSInteger rpm;
/// Live event (false if history event)
@property (nonatomic, readonly) BOOL liveEvent;
@end

@class VariableParam;

/// Get system variable response.
SWIFT_CLASS("_TtC12PacificTrack25GetSystemVariableResponse")
@interface GetSystemVariableResponse : ControlFrame
/// Response status
@property (nonatomic, readonly) enum ResponseStatus status;
/// Variable
@property (nonatomic, readonly, strong) VariableParam * _Nonnull variablePair;
@end


/// Tracker Get Vehicle Information response.
SWIFT_CLASS("_TtC12PacificTrack29GetVehicleInformationResponse")
@interface GetVehicleInformationResponse : ControlFrame
/// Tracker’s response status
@property (nonatomic, readonly) enum ResponseStatus status;
/// VIN
@property (nonatomic, readonly, copy) NSString * _Nonnull vin;
/// Contains a Bus list (use <code>busArray</code> when coding in Objective-C and <code>bus</code> when coding in Swift
/// <h3>Possible values</h3>
/// <em>0</em>: OBD-II
/// <em>1</em>: J1708
/// <em>2</em>: J1939
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull busArray;
@end


/// Response Status
typedef SWIFT_ENUM(NSInteger, ResponseStatus, open) {
/// succes status
  ResponseStatusSuccess = 0,
/// failure status
  ResponseStatusFailure = 1,
};


/// Retrieve Stored Events response
SWIFT_CLASS("_TtC12PacificTrack28RetrieveStoredEventsResponse")
@interface RetrieveStoredEventsResponse : ControlFrame
/// Status
@property (nonatomic, readonly) enum ResponseStatus status;
@end


/// SPNData parameter.
SWIFT_CLASS("_TtC12PacificTrack7SPNData")
@interface SPNData : NSObject
/// SPN (range <code>0 to 9999</code>)
@property (nonatomic, readonly) NSUInteger spn;
/// address (range <code>0 to 253</code>)
@property (nonatomic, readonly) NSUInteger address;
/// value
@property (nonatomic, readonly) NSUInteger value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum SPNEventMode : NSInteger;

/// SPN Definition Parameter
SWIFT_CLASS("_TtC12PacificTrack18SPNDefinitionParam")
@interface SPNDefinitionParam : NSObject
/// SPN (range <code>0 to 9999</code>)
@property (nonatomic, readonly) NSUInteger spn;
/// SPN Event Mode
@property (nonatomic, readonly) enum SPNEventMode mode;
/// timer (range <code>0 to 3600</code>)
@property (nonatomic, readonly) NSUInteger timer;
/// value (range <code>0 to 0xFFFFFFFF</code>)
@property (nonatomic, readonly) NSUInteger value;
/// pgn (range <code>0 to 65535</code>)
@property (nonatomic, readonly) NSUInteger pgn;
/// address (range <code>0 to 253, 255</code>)
@property (nonatomic, readonly) NSUInteger address;
/// starting byte (range <code>1 to 8</code>)
@property (nonatomic, readonly) NSUInteger startByte;
/// starting bit (range <code>0 to 8</code>, where 0 indicates a full byte)
@property (nonatomic, readonly) NSUInteger startBit;
/// length (range <code>1 to 64</code>)
@property (nonatomic, readonly) NSUInteger length;
/// Creates SPNDefinitionParam Object
/// <h3>Usage Example:</h3>
/// \code
/// // This definition request SPN 190 (which is the RPM) every 5 seconds
/// let spnEventDefinition = SPNDefinitionParam(spn: 190, mode: .timer, timer: 5, value: 0, pgn: 61444, address: 255, startByte: 4, startBit: 0, length: 16)
///
/// \endcode\param spn SPN (range <code>0 to 9999</code>)
///
/// \param mode SPN Event Mode - see <code>SPNEventMode</code> for list of modes
///
/// \param timer timer (range <code>0 to 3600</code>)
///
/// \param value value (range <code>0 to 0xFFFFFFFF</code>)
///
/// \param png pgn (range <code>0 to 65535</code>)
///
/// \param address address (range <code>0 to 253, 255</code>)
///
/// \param startByte starting byte (range <code>1 to 8</code>)
///
/// \param startBit starting bit (range <code>0 to 8</code>, where 0 indicates a full byte)
///
/// \param length length (range <code>1 to 64</code>)
///
- (nullable instancetype)initWithSpn:(NSUInteger)spn mode:(enum SPNEventMode)mode timer:(NSUInteger)timer value:(NSUInteger)value pgn:(NSUInteger)pgn address:(NSUInteger)address startByte:(NSUInteger)startByte startBit:(NSUInteger)startBit length:(NSUInteger)length OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// SPN Data Event.
SWIFT_CLASS("_TtC12PacificTrack13SPNEventFrame")
@interface SPNEventFrame : ControlFrame
/// SPN Event Number (range <code>0 to 7</code>)
@property (nonatomic, readonly) NSInteger spnEventNumber;
/// SPN Data
@property (nonatomic, readonly, strong) SPNData * _Nonnull spnData;
@end

/// SPN Event Mode
typedef SWIFT_ENUM(NSInteger, SPNEventMode, open) {
/// SPN is reported every <code>timer</code> seconds
  SPNEventModeTimer = 0,
/// Event generated once when the measured value becomes lower than <code>value</code>
  SPNEventModeLowerThanValue = 1,
/// Event generated once when the measured value becomes higher or equal to <code>value</code>
  SPNEventModeHigherThanValue = 2,
/// Event generated on both down and up transitions
  SPNEventModeTransitions = 3,
};


/// Set SPN response.
SWIFT_CLASS("_TtC12PacificTrack14SetSPNResponse")
@interface SetSPNResponse : ControlFrame
/// Response status
@property (nonatomic, readonly) enum ResponseStatus status;
/// SPN Event Number
@property (nonatomic, readonly) NSInteger spnEventNumber;
@end


/// Set system variable response.
SWIFT_CLASS("_TtC12PacificTrack25SetSystemVariableResponse")
@interface SetSystemVariableResponse : ControlFrame
/// Response status
@property (nonatomic, readonly) enum ResponseStatus status;
@end


/// Stored Events Count response
SWIFT_CLASS("_TtC12PacificTrack25StoredEventsCountResponse")
@interface StoredEventsCountResponse : ControlFrame
/// Status
@property (nonatomic, readonly) enum ResponseStatus status;
/// Count of stored Events
@property (nonatomic, readonly) NSUInteger count;
@end

/// Defines all possible <code>SystemVariable</code> types.
typedef SWIFT_ENUM(NSInteger, SystemVariable, open) {
/// Time between periodic events (in seconds).
/// <em>min</em>: <code>0</code>,
/// <em>max</em>: <code>7200</code>,
/// <em>default</em>: <code>10</code>
  SystemVariableTimeBetweenPeriodicEvents = 0,
/// Bluetooth streaming of events.
/// <code>1</code> means <em>enabled</em>,
/// <code>0</code> means <em>disabled</em>,
/// <em>default</em>: <code>1</code>
  SystemVariableBluetoothEventsStreaming = 1,
/// UART streaming of events.
/// <code>1</code> means <em>enabled</em>,
/// <code>0</code> means <em>disabled</em>,
/// <em>default</em>: <code>0</code>
  SystemVariableUartEventsStreaming = 2,
/// Ignition debounce time (in seconds).
/// <em>min</em>: <code>0</code>,
/// <em>max</em>: <code>60</code>,
/// <em>default</em>: <code>5</code>
  SystemVariableIgnitionDebounceTime = 3,
/// Minimum RPM to consider engine running.
/// <em>min</em>: <code>1</code>,
/// <em>max</em>: <code>1000</code>,
/// <em>default</em>: <code>50</code>
  SystemVariableMinRPM = 4,
/// RPM debounce time (in seconds).
/// <em>min</em>: <code>1</code>,
/// <em>max</em>: <code>60</code>,
/// <em>default</em>: <code>5</code>
  SystemVariableRpmDebounceTime = 5,
/// Minimum speed at which a start of trip event will be triggered (in km/h).
/// <em>min</em>: <code>1</code>,
/// <em>max</em>: <code>100</code>,
/// <em>default</em>: <code>5</code>
  SystemVariableMinSpeedTrigger = 6,
/// Minimum time above the minimum speed to start a trip (in seconds).
/// <em>min</em>: <code>1</code>,
/// <em>max</em>: <code>300</code>,
/// <em>default</em>: <code>5</code>
  SystemVariableMinTimeAboveMinSpeed = 7,
/// Maximum speed at which an end of trip event will be triggered (in km/h).
/// <em>min</em>: <code>1</code>,
/// <em>max</em>: <code>100</code>,
/// <em>default</em>: <code>1</code>
  SystemVariableMaxSpeedTrigger = 8,
/// Minimum time below the maximum speed to end a trip (in seconds).
/// <em>min</em>: <code>1</code>,
/// <em>max</em>: <code>300</code>,
/// <em>default</em>: <code>90</code>
  SystemVariableMinTimeBelowMaxSpeed = 9,
/// Red LED ON
/// <code>1</code> means <em>on</em>,
/// <code>0</code> means <em>off</em>,
/// <em>default</em>: <code>1</code>
  SystemVariableRedLedOn = 10,
/// Store Events in Flash when not connected.
/// <code>1</code> means <em>store</em>,
/// <code>0</code> means <em>discard</em>,
/// <em>default</em>: <code>1</code>
  SystemVariableStoreEventsInFlash = 11,
/// Threshold for generating harsh acceleration event (in mG). <code>0</code> means no reporting.
/// <em>min</em>: <code>0</code>,
/// <em>max</em>: <code>8192</code>,
/// <em>default</em>: <code>0</code>
  SystemVariableDrivingAcceleration = 12,
/// Threshold for generating harsh braking event (in mG). <code>0</code> means no reporting.
/// <em>min</em>: <code>0</code>,
/// <em>max</em>: <code>8192</code>,
/// <em>default</em>: <code>0</code>
  SystemVariableDrivingBraking = 13,
/// Threshold for generating harsh cornering/swerving event (in mG). <code>0</code> means no reporting.
/// <em>min</em>: <code>0</code>,
/// <em>max</em>: <code>8192</code>,
/// <em>default</em>: <code>0</code>
  SystemVariableDrivingCornering = 14,
/// Odometer Override
/// <em>min</em>: <code>0</code>,
/// <em>max</em>: <code>2147483647</code>,
/// <em>default</em>: <code>0</code>
  SystemVariableOdometerOverride = 15,
};

@class NSNumber;

/// Tracker basic information
SWIFT_CLASS("_TtC12PacificTrack15TrackerBaseInfo")
@interface TrackerBaseInfo : NSObject
/// Tracker name
@property (nonatomic, copy) NSString * _Nullable trackerName;
/// Tracker UUID
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Signal strength
@property (nonatomic, strong) NSNumber * _Nonnull rssi;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TrackerFirmwareType : NSInteger;
@class NSData;

/// Tracker Firmare File
SWIFT_CLASS("_TtC12PacificTrack19TrackerFirmwareFile")
@interface TrackerFirmwareFile : NSObject
/// Firmware file name (including extension)
@property (nonatomic, copy) NSString * _Nonnull name;
/// Firmare file type - check <code>TrackerFirmwareType</code>
@property (nonatomic) enum TrackerFirmwareType type;
/// Firmare file content
@property (nonatomic, copy) NSData * _Nonnull data;
/// Creates TrackerFirmwareFile Object
/// <h3>Usage Example:</h3>
/// \code
/// let trackerFirmware = TrackerFirmwareFile(name: "PT30_L11_V1_0_13.exf", type: .controller, data: fileData)
///
/// \endcode\param name Firmware file name (including extension)
///
/// \param type Firmare file type - check <code>TrackerFirmwareType</code>
///
/// \param data Firmare file content
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name type:(enum TrackerFirmwareType)type data:(NSData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Tracker Firmware Types
typedef SWIFT_ENUM(NSInteger, TrackerFirmwareType, open) {
/// Controller Firmware
  TrackerFirmwareTypeController = 0,
/// BLE Firmware
  TrackerFirmwareTypeBle = 1,
};


/// Tracker information
SWIFT_CLASS("_TtC12PacificTrack11TrackerInfo")
@interface TrackerInfo : NSObject
/// Tracker’s product name
@property (nonatomic, copy) NSString * _Nonnull productName;
/// Tracker’s main version
@property (nonatomic, strong) VersionParam * _Nonnull mainVersion;
/// Tracker’s BLE Version
@property (nonatomic, strong) VersionParam * _Nonnull bleVersion;
/// Tracker’s VIN (PT30 only)
@property (nonatomic, copy) NSString * _Nullable vin;
/// Tracker’s IMEI (PT40 only)
@property (nonatomic, copy) NSString * _Nullable imei;
/// Tracker’s serial number
@property (nonatomic, copy) NSString * _Nonnull serialNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TrackerServiceState : NSInteger;
@class VirtualDashboardDataUnwrapped;
@protocol TrackerServiceDelegate;
@class CBPeripheral;
enum TrackerServiceError : NSInteger;
enum TrackerUpgradeError : NSInteger;

/// TrackerService provides an easy to use interface with a PT-30 and PT-40 device.
SWIFT_CLASS("_TtC12PacificTrack14TrackerService")
@interface TrackerService : NSObject
/// Current TrackerService state
@property (nonatomic, readonly) enum TrackerServiceState state;
/// Use this for displaying debug messages
@property (nonatomic) BOOL debug;
/// Active tracker, <code>nil</code> if there is no tracker connected
@property (nonatomic, strong) TrackerInfo * _Nullable tracker;
/// Virtual Dashboard Unwrapped (intended for Obj-C)
@property (nonatomic, readonly, strong) VirtualDashboardDataUnwrapped * _Nonnull virtualDashboardDataUnwrapped;
/// API key
@property (nonatomic, copy) NSString * _Nullable apiKey;
/// The object that acts as a delegate of <code>TrackerService</code>.
/// The delegate must adopt the <code>TrackerServiceDelegate</code> protocol.
@property (nonatomic, strong) id <TrackerServiceDelegate> _Nullable delegate;
/// Singleton instance of the <code>TrackerService</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TrackerService * _Nonnull sharedInstance;)
+ (TrackerService * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Handle tracker peripheral that has been found using CoreBluetooth.
/// Once the <code>TrackerService</code> has began handling the peripheral, it notifies the registered delegate.
/// <h3>Swift Usage Example:</h3>
/// \code
/// // peripheral is a CBPeripheral object
/// trackerService.handle(trackerPeripheral: peripheral)
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// // peripheral is a CBPeripheral object
/// [_trackerService handleWithTrackerPeripheral:peripheral];
///
/// \endcode\param trackerPeripheral CBPeripheral tracker that you want TrackerService to handle
///
- (void)handleWithTrackerPeripheral:(CBPeripheral * _Nonnull)peripheral;
/// Stop handling tracker peripheral that has been set for handling with <code>handle()</code> function,
/// and return the <code>CBPeripheral</code> object (if found).
/// <h2>Important Notes</h2>
/// Use this method before you disconnect the tracker throught central manager. After you’ve called this function, you must manually cancel peripheral
/// connection from central manager.
/// <h3>Swift Usage Example:</h3>
/// \code
/// // peripheral is a CBPeripheral object
/// if let peripheral = trackerService.stopHandling() {
///    // once the trackerService stops the peripheral handling you will get
///    // a CBPeripheral object. Then you can use your CBCentralManager instance
///    // to disconnect the peripheral
///    centralManager.cancelPeripheralConnection(peripheral)
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// // peripheral is a CBPeripheral object
/// CBPeripheral * _Nullable peripheral = [_trackerService stopHandling];
/// if (peripheral) {
///     // once the trackerService stops the peripheral handling you will get
///     // a CBPeripheral object. Then you can use your CBCentralManager instance
///     // to disconnect the peripheral
///     [centralManager cancelPeripheralConnection:peripheral]
/// }
///
/// \endcode
/// returns:
/// CBPeripheral (tracker) object (that you pass to <code>cancelPeripheralConnection</code> using central manager).
- (CBPeripheral * _Nullable)stopHandling SWIFT_WARN_UNUSED_RESULT;
/// Gets tracker information.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.getInformation { response, error in
/// guard let informationResponse = response else {
///     return
/// }
/// // do whatever you want with the informationResponse
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService getInformationWithResponse:^(GetInformationResponse * _Nullable informationResponse, enum TrackerServiceError error) {
///  if (informationResponse) {
///      // do whatever you want with the informationResponse
///  }
/// }];
///
/// \endcode\param response The completion handler to call once tracker information is received.
/// Completion handler has two parameters <em>response</em> that is of <code>GetInformationResponse?</code> type. If
/// an error occured this parameter will be nil. Second parameter is <em>error</em> that is of
/// <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was no error.
///
- (void)getInformationWithResponse:(void (^ _Nonnull)(GetInformationResponse * _Nullable, enum TrackerServiceError))response;
/// Gets tracker current status.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.getStatus { response, error in
///     guard let statusResponse = response else {
///         return
///     }
///     // do whatever you want with the statusResponse
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService getStatusWithResponse:^(GetStatusResponse * _Nullable statusResponse, enum TrackerServiceError error) {
///     if (statusResponse) {
///         // do whatever you want with the statusResponse
///     }
/// }];
///
/// \endcode\param response The completion handler to call when the status response is received.
/// Completion handler has two parameters <em>response</em> that is of <code>GetStatusResponse?</code> type. If
/// an error occured this parameter will be nil. Second parameter is <em>error</em> that is of
/// <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was no error.
///
- (void)getStatusWithResponse:(void (^ _Nonnull)(GetStatusResponse * _Nullable, enum TrackerServiceError))response;
/// Gets tracker stored events count.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.getStoredEventsCount { response, error in
///     guard let storedEventsResponse = response else {
///         return
///     }
///     // do whatever you want with the storedEventsResponse
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService getStoredEventsCountWithResponse:^(StoredEventsCountResponse * _Nullable storedEventsResponse, enum TrackerServiceError error) {
///     if (storedEventsResponse) {
///         // do whatever you want with the storedEventsResponse
///     }
/// }];
///
/// \endcode\param response The completion handler to call when the status response is received.
/// Completion handler has two parameters <em>response</em> that is of <code>StoredEventsCountResponse?</code> type. If
/// an error occured this parameter will be nil. Second parameter is <em>error</em> that is of
/// <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was no error.
///
- (void)getStoredEventsCountWithResponse:(void (^ _Nonnull)(StoredEventsCountResponse * _Nullable, enum TrackerServiceError))response;
/// Starts the streaming of stored events.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.retrieveStoredEvents { response, error in
///     // check if there are error
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService retrieveStoredEventsWithResponse:^(RetrieveStoredEventsResponse * _Nullable retrieveStoredEventsResponse, enum TrackerServiceError error) {
///     // check if there are error
/// }];
///
/// \endcode\param response The completion handler to call when the status response is received.
/// Completion handler has two parameters <em>response</em> that is of <code>RetrieveStoredEventsResponse?</code> type. If
/// an error occured this parameter will be nil. Second parameter is <em>error</em> that is of
/// <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was no error.
///
- (void)retrieveStoredEventsWithResponse:(void (^ _Nonnull)(RetrieveStoredEventsResponse * _Nullable, enum TrackerServiceError))response;
/// Clears the tracker’s stored events.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.clearStoredEvents { response, error in
///     guard let clearStoredEventsResponse = response else {
///         return
///     }
///     // check clearStoredEventsResponse status
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService clearStoredEventsWithResponse:^(ClearStoredEventsResponse * _Nullable clearStoredEventsResponse, enum TrackerServiceError error) {
///     if (storedEventsResponse) {
///         // check clearStoredEventsResponse status
///     }
/// }];
///
/// \endcode\param response The completion handler to call when the status response is received.
/// Completion handler has two parameters <em>response</em> that is of <code>ClearStoredEventsResponse?</code> type. If
/// an error occured this parameter will be nil. Second parameter is <em>error</em> that is of
/// <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was no error.
///
- (void)clearStoredEventsWithResponse:(void (^ _Nonnull)(ClearStoredEventsResponse * _Nullable, enum TrackerServiceError))response;
/// Get’s vehicle information.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.getVehicleInformation { response, error in
///     guard let clearStoredEventsResponse = response else {
///         return
///     }
///     // check clearStoredEventsResponse status
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService getVehicleInformationWithResponse:^(GetVehicleInformationResponse * _Nullable vehicleInfomrationResponse, enum TrackerServiceError error) {
///     if (vehicleInfomrationResponse) {
///         // process vehicleInfomrationResponse
///     }
/// }];
///
/// \endcode\param response The completion handler to call when the status response is received.
/// Completion handler has two parameters <em>response</em> that is of <code>GetVehicleInformationResponse?</code> type. If
/// an error occured this parameter will be nil. Second parameter is <em>error</em> that is of
/// <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was no error.
///
- (void)getVehicleInformationWithResponse:(void (^ _Nonnull)(GetVehicleInformationResponse * _Nullable, enum TrackerServiceError))response;
/// Gets system variable.
/// <h3>Usage Example:</h3>
/// \code
/// trackerService.getSystemVariable(SystemVariable.minRPM) { response, error in
///     guard let variableResponse = response else {
///         return
///     }
///     // do whatever you want with the variableResponse
///     let minRPM = variableResponse.variablePair.value
/// }
///
/// \endcode\param variable <code>SystemVariable</code> type which you want to get
///
/// \param response The completion handler to call when the get system variable response is
/// received. Completion handler has two parameters <em>response</em> that is of <code>GetSystemVariableResponse?</code>
/// type. If an error occured this parameter will be nil. Second parameter is <em>error</em>, and
/// if error that is of <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there
/// was no error. Completion handler contains one parameter <em>response</em> that is of
/// <code>GetSystemVariableResponse</code> type
///
- (void)getSystemVariable:(enum SystemVariable)variable response:(void (^ _Nonnull)(GetSystemVariableResponse * _Nullable, enum TrackerServiceError))response;
/// Gets system variable.
/// <h3>Usage Example:</h3>
/// \code
/// trackerService.getSystemVariable("RM") { response, error in
///     guard let variableResponse = response else {
///         return
///     }
///     // do whatever you want with the variableResponse
///     let minRPM = variableResponse.variablePair.value
/// }
///
/// \endcode\param variableTag <code>String</code> value (tag) of variable which you want to get
///
/// \param response The completion handler to call when the get system variable response is
/// received. Completion handler has two parameters <em>response</em> that is of <code>GetSystemVariableResponse?</code>
/// type. If an error occured this parameter will be nil. Second parameter is <em>error</em>, and
/// if error that is of <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there
/// was no error. Completion handler contains one parameter <em>response</em> that is of
/// <code>GetSystemVariableResponse</code> type
///
- (void)getSystemVariableByTag:(NSString * _Nonnull)variableTag response:(void (^ _Nonnull)(GetSystemVariableResponse * _Nullable, enum TrackerServiceError))response;
/// Sets system variable.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.setSystemVariable(SystemVariable.minRPM, value: "100") { response, error in
///     guard let setVariableResponse = response else {
///         return
///     }
///
///     if setVariableResponse.status == .success {
///         // minRPM set to 100
///     } else {
///         // failed to set minRPM
///     }
/// }
///
/// \endcode\param variable <code>SystemVariable</code> type that you want to set
///
/// \param value <code>String</code> value for the variable
///
/// \param response The completion handler to call when the set system variable response is
/// received. Completion handler has two parameters <em>response</em> that is of <code>SetSystemVariableResponse?</code>
/// type. If an error occured this parameter will be nil. Second parameter is <em>error</em>, and
/// if error that is of <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was
/// no error.
///
- (void)setSystemVariable:(enum SystemVariable)variable value:(NSString * _Nonnull)value response:(void (^ _Nonnull)(SetSystemVariableResponse * _Nullable, enum TrackerServiceError))response;
/// Sets system variable.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.setSystemVariable(SystemVariable.minRPM, value: "100") { response, error in
///     guard let setVariableResponse = response else {
///         return
///     }
///
///     if setVariableResponse.status == .success {
///         // minRPM set to 100
///     } else {
///         // failed to set minRPM
///     }
/// }
///
/// \endcode\param variableTag <code>String</code> value (tag) of variable which you want to set
///
/// \param value <code>String</code> value for the variable
///
/// \param response The completion handler to call when the set system variable response is
/// received. Completion handler has two parameters <em>response</em> that is of <code>SetSystemVariableResponse?</code>
/// type. If an error occured this parameter will be nil. Second parameter is <em>error</em>, and
/// if error that is of <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was
/// no error.
///
- (void)setSystemVariableByTag:(NSString * _Nonnull)variableTag value:(NSString * _Nonnull)value response:(void (^ _Nonnull)(SetSystemVariableResponse * _Nullable, enum TrackerServiceError))response;
/// Set SPN Request
/// <h3>Swift Usage Example:</h3>
/// \code
/// // This definition request SPN 190 (which is the RPM) every 5 seconds
/// guard let spnEventDefinition = SPNDefinitionParam(spn: 190, mode: .timer, timer: 5, value: 0, pgn: 61444, address: 255, startByte: 4, startBit: 0, length: 16) {
///    // something went wrong (make sure parameters are in allowed range)
///    return
/// }
///
/// // This example send the SPN definition to tracker and sets it to SPN Event Number 1
/// trackerService.setSPN(spnEventNumber: 1, spnEventDefinition: spnEventDefinition) { response, trackerServiceError in
///    guard let setSPNResponse = response else {
///        return
///    }
///
///     if setSPNResponse.status == .success {
///        // Set SPN request completed successfully
///     } else {
///        // Set SPN request failed
///     }
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// // This definition request SPN 190 (which is the RPM) every 5 seconds
/// SPNDefinitionParam * _Nullable spnEventDefinition = [[SPNDefinitionParam alloc] initWithSpn:190 mode:SPNEventModeTimer timer:5 value:0 pgn:61444 address:255 startByte:4 startBit:0 length:16];
///
/// if (spnEventDefinition == nil) {
///     // something went wrong (make sure parameters are in allowed range)
///     return;
/// }
///
/// // This example send the SPN definition to tracker and sets it to SPN Event Number 1
/// [_trackerService setSPNWithSpnEventNumber:1 spnEventDefinition:spnEventDefinition response:^(SetSPNResponse * _Nullable setSPNResponse, enum TrackerServiceError error) {
///     if (setSPNResponse) {
///         if (setSPNResponse.status == ResponseStatusSuccess) {
///             // Set SPN request completed successfully
///         } else {
///             // Set SPN request failed
///         }
///     }
/// }];
///
/// \endcode\param spnEventNumber SPN Event Number (range <code>0 to 7</code>)
///
/// \param spnEventDefinition SPN Event definition - check <code>SPNDefinitionParam</code>
///
- (void)setSPNWithSpnEventNumber:(NSInteger)spnEventNumber spnEventDefinition:(SPNDefinitionParam * _Nonnull)spnEventDefinition response:(void (^ _Nonnull)(SetSPNResponse * _Nullable, enum TrackerServiceError))response;
/// Checks for DTC codes
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.getDTCCodes() { response, error in
///    guard let getDTCResponse = response else {
///        return
///    }
///
///     // do something with getDTCResponse.errorCodes
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService getDTCCodes:^(GetDTCResponse * _Nullable getDTCResponse, enum TrackerServiceError error) {
///    if (getDTCResponse) {
///        // do something with getDTCResponse.errorCodes
///    }
/// }];
///
/// \endcode\param response The completion handler to call when the check for DTC codes response is
/// received. Completion handler has two parameters <em>response</em> that is of <code>GetDTCResponse?</code>
/// type. If an error occured this parameter will be nil. Second parameter is <em>error</em>, and
/// if error that is of <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was
/// no error.
///
- (void)getDTCCodesWithResponse:(void (^ _Nonnull)(GetDTCResponse * _Nullable, enum TrackerServiceError))response;
/// Clears DTC codes. Note that the DTC’s will likely come back if the reason for the failure has not been cleared.
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.clearDTCCodes() { response, error in
///     guard let clearDTCResponse = response else {
///        return
///     }
///
///     if clearDTCResponse == .success {
///         // DTC codes were cleared
///     } else {
///         // failed to clear DTC codes
///     }
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService clearDTCCodes:^(ClearDTCResponse * _Nullable clearDTCResponse, enum TrackerServiceError error) {
///     if (clearDTCResponse) {
///         if (clearDTCResponse.status == ResponseStatusSuccess) {
///             // DTC codes were cleared
///         } else {
///             // failed to clear DTC codes
///         }
///     }
/// }];
///
/// \endcode\param response The completion handler to call when the clear DTC codes response is
/// received. Completion handler has two parameters <em>response</em> that is of <code>ClearDTCResponse?</code>
/// type. If an error occured this parameter will be nil. Second parameter is <em>error</em>, and
/// if error that is of <code>TrackerServiceError</code> type. It will be TrackerServiceError.noError if there was
/// no error.
///
- (void)clearDTCCodesWithResponse:(void (^ _Nonnull)(ClearDTCResponse * _Nullable, enum TrackerServiceError))response;
/// Checks for an available upgrade
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.isUpgradeAvailable() { upgradeAvailable, error in
///     if upgradeAvailable {
///         // upgrade available
///     } else {
///         // no upgrade available
///     }
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService isUpgradeAvailableWithResponse:^(BOOL upgradeAvailable, enum TrackerUpgradeError error) {
///     if (upgradeAvailable) {
///         // upgrade available
///     } else {
///         // no upgrade available
///     }
/// }];
///
/// \endcode\param response The completion handler to call when the upgrade check has been performed.
/// Completion handler has two parameters <em>isUpgradeAvailable</em> that is of <code>Bool?</code>
/// type. If an error occured this parameter will be nil. Second parameter is <em>error</em>, and
/// if error that is of <code>TrackerUpgradeError</code> type. It will be TrackerUpgradeError.noError if there was no error.
///
- (void)isUpgradeAvailableWithResponse:(void (^ _Nonnull)(BOOL, enum TrackerUpgradeError))response;
/// Performs an upgrade if upgrade is available. Delegates events through <code>TrackerServiceDelegate</code>
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.performUpgrade()
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService performUpgrade];
///
/// \endcode
- (void)performUpgrade;
/// Performs an upgrade manually specifying firmware file. Delegates events through <code>TrackerServiceDelegate</code>
/// <h3>Swift Usage Example:</h3>
/// \code
/// // IMPORTANT NOTE: fileName has to contain file extension
/// let firmwareFile = TrackerFirmwareFile(name: fileName, type: .controller, data: fileContent)
/// trackerService.performUpgradeUsing(firmware: firmwareFile)
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// // IMPORTANT NOTE: fileName has to contain file extension
/// TrackerFirmwareFile *trackerFirmwareFile = [[TrackerFirmwareFile alloc] initWithName:fileName type:TrackerFirmwareTypeController data:fileContent];
/// [_trackerService performUpgradeUsingFirmware:trackerFirmwareFile];
///
/// \endcode\param firmware Firmware file that will be used to perform an upgrade. Check <code>TrackerFirmwareFile</code>.
///
- (void)performUpgradeUsingFirmware:(TrackerFirmwareFile * _Nonnull)firmware;
/// Cancels an upgrade if it’s already in progress
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.cancelUpgrade()
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService cancelUpgrade];
///
/// \endcode
- (void)cancelUpgrade;
/// Performs trackers diagnostics
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.performDiagnostics { fileName, error in
///     guard let fileName = fileName else {
///         // error occurred, do something if needed
///         // you can also check for error type
///         return
///     }
///     
///     // do something with fileName if needed
/// }
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService performDiagnosticsWithResponse:^(NSString * _Nullable fileName, enum TrackerServiceError error) {
///     if (fileName) {
///         // do something with fileName if needed
///     } else {
///         // error occurred, do something if needed
///         // you can also check for error type
///     }
/// }];
///
/// \endcode\param response The completion handler to call when the diagnostics has been completed.
/// Completion handler has two parameters <em>fileName</em> that is a <code>String?</code> type. If an error occured
/// this parameter will be nil, otherwise it will contain the file name. Second parameter is <em>error</em>
/// that is of <code>TrackerServiceError?</code> type. It will be nil if there was no error, and if error occured
/// it will be <code>TrackerServiceError.failed</code> if diagnostics failed, and <code>TrackerServiceError.wsError</code> if
/// an error occured on web service side.
///
- (void)performDiagnosticsWithResponse:(void (^ _Nonnull)(NSString * _Nullable, enum TrackerServiceError))response;
/// Cancels diagnostics if it’s already in progress
/// <h3>Swift Usage Example:</h3>
/// \code
/// trackerService.cancelDiagnostics()
///
/// \endcode<h3>Objective-C Usage Example:</h3>
/// \code
/// [_trackerService cancelDiagnostics];
///
/// \endcode
- (void)cancelDiagnostics;
@end




@class VirtualDashboardReport;

/// The delegate of a TrackerService object must adopt the TrackerServiceDelegate protocol.
/// TrackerService notifies the delegate about events and messages using this protocol.
SWIFT_PROTOCOL("_TtP12PacificTrack22TrackerServiceDelegate_")
@protocol TrackerServiceDelegate
/// Tracker has been synced.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     tracker: connected tracker
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService didSync:(TrackerInfo * _Nonnull)trackerInfo;
/// Tracker has sent an event
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     event: event notification that tracker has sent
///   </li>
///   <li>
///     processed: completion handler that notifies the tracker that the event has been processed/stored
///     and can be deleted from the device. Setting it to <code>true</code> using <code>processed(true)</code> notifies the tracker
///     that the event can be deleted, and setting it to <code>false</code> lets tracker know it should store it for later.
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService didReceive:(EventFrame * _Nonnull)event processed:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL))processed;
/// Tracker has retrieved a stored event
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     event: event that has ben retrieved from stored events
///   </li>
///   <li>
///     processed: completion handler that notifies the tracker that the event has been processed/stored
///     and can be deleted from the tracker’s storage. Setting it to <code>true</code> using <code>processed(true)</code> notifies the tracker
///     that the event can be deleted, and that the next stored event can be retrieved.
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService didRetrieve:(EventFrame * _Nonnull)event processed:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL))processed;
/// Tracker has sent an SPN event
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     spnEvent: SPN event notification that tracker has sent
///   </li>
///   <li>
///     processed: completion handler that notifies the tracker that the SPN event has been processed/stored
///     and can be deleted from the device. Setting it to <code>true</code> using <code>processed(true)</code> notifies the tracker
///     that the SPN event has been processed.
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService didReceiveSPN:(SPNEventFrame * _Nonnull)spnEvent processed:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL))processed;
/// Tracker has sent a new VirtualDashboardReport
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     virtualDashboardReport: Virtual Dashboard Report containing only new values. You can read all dashboard values by accessing <code>trackerService.virtualDashboard</code>
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService didReceieveVirtualDashboardReport:(VirtualDashboardReport * _Nonnull)virtualDashboardReport;
/// TrackerService has encountered an error
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     error: error type
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService onError:(enum TrackerServiceError)error;
/// TrackerService firmware upgrade progress has changed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     progress: update progress indicator (0 to 1)
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService onFirmwareUpgradeProgress:(float)progress;
/// TrackerService firmware upgrade failed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     error: <code>TrackerServiceError</code>
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService onFirmwareUpgradeFailed:(enum TrackerUpgradeError)error;
/// TrackerService firmware upgrade completed
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     trackerService: delegator object
///   </li>
///   <li>
///     completed: <code>Bool</code>
///   </li>
/// </ul>
- (void)trackerService:(TrackerService * _Nonnull)trackerService onFirmwareUpgradeCompleted:(BOOL)completed;
@end

/// All possible <code>TrackerService</code> error events.
typedef SWIFT_ENUM(NSInteger, TrackerServiceError, open) {
/// Generic failure.
  TrackerServiceErrorFailed = 0,
/// Invalid parameters were passed to the method.
  TrackerServiceErrorInvalidParameters = 1,
/// A pre-requisite was not met when the method was executed.
  TrackerServiceErrorInvalidState = 2,
/// Invalid request
  TrackerServiceErrorInvalidRequest = 3,
/// Invalid response
  TrackerServiceErrorInvalidResponse = 4,
/// Tracker unavailable
  TrackerServiceErrorTrackerUnavailable = 5,
/// Tracker not synced
  TrackerServiceErrorTrackerNotSynced = 6,
/// Web Service Error
  TrackerServiceErrorWsError = 7,
/// Bluetooth Off
  TrackerServiceErrorBluetoothOff = 8,
/// Not supported
  TrackerServiceErrorNotSupported = 9,
/// Error did not occur
  TrackerServiceErrorNoError = 10,
};

/// Defines all possible tracker service states.
typedef SWIFT_ENUM(NSInteger, TrackerServiceState, open) {
/// TrackerService state is idle - the tracker is not being handled
  TrackerServiceStateIdle = 0,
/// TrackerService is being handled
  TrackerServiceStateHandled = 1,
/// TrackerService is synced with tracker.
  TrackerServiceStateSynced = 2,
/// TrackerService is doing a firmware upgrade
  TrackerServiceStateUpgrade = 3,
/// TrackerService is performing diagnostics
  TrackerServiceStateDiagnostics = 4,
/// TrackerService completed firmware upgrade and is waiting for sync
  TrackerServiceStateUpgradeCompleted = 5,
};

/// All possible <code>TrackerUpgradeError</code> types.
typedef SWIFT_ENUM(NSInteger, TrackerUpgradeError, open) {
/// Error obtaining device status
  TrackerUpgradeErrorDeviceStatusFailed = 0,
/// Error obtaining device info
  TrackerUpgradeErrorDeviceInfoFailed = 1,
/// Error obtaining firmware info
  TrackerUpgradeErrorGetFirmwareInfoFailed = 2,
/// Error downloading firmware
  TrackerUpgradeErrorFirmwareDownloadFailed = 3,
/// General upgrade failed (file chunks were received out of order, etc)
  TrackerUpgradeErrorUpgradeFailed = 4,
/// File open/close error
  TrackerUpgradeErrorFileIOError = 5,
/// File chunks received out of order
  TrackerUpgradeErrorSequenceError = 6,
/// Size mismatch
  TrackerUpgradeErrorSizeMismatch = 7,
/// Checksum Error
  TrackerUpgradeErrorChecksumError = 8,
/// Upgrade initialization failed
  TrackerUpgradeErrorUpgradeInitFailed = 9,
/// Either there is no user available or the logged in user
/// does not have proper authorities.
  TrackerUpgradeErrorUnauthorized = 10,
/// Upgrade is not required (already running latest firmware)
  TrackerUpgradeErrorUpgradeNotRequired = 11,
/// Upgrade was canceled
  TrackerUpgradeErrorCanceled = 12,
/// Timeout
  TrackerUpgradeErrorTimeout = 13,
/// Error did not occur
  TrackerUpgradeErrorNoError = 14,
};



/// Variable parameter.
SWIFT_CLASS("_TtC12PacificTrack13VariableParam")
@interface VariableParam : NSObject
/// Variable type
@property (nonatomic, readonly, copy) NSString * _Nonnull variable;
/// Variable value
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Version parameter.
SWIFT_CLASS("_TtC12PacificTrack12VersionParam")
@interface VersionParam : NSObject
/// level
@property (nonatomic, readonly) NSUInteger level;
/// version
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12PacificTrack29VirtualDashboardDataUnwrapped")
@interface VirtualDashboardDataUnwrapped : NSObject
/// Indicates if the <code>busType</code> is present
@property (nonatomic) BOOL busTypePresent;
/// Bus Type - OBD-II = 1, J1708/J1587 = 2, J1939 = 4
@property (nonatomic) NSUInteger busType;
/// Indicates if the <code>odometerComputed</code> is present
@property (nonatomic) BOOL odometerComputedPresent;
/// Odometer Computed - true if odometer is computed, false if it’s from vehicle bus
@property (nonatomic) BOOL odometerComputed;
/// Indicates if the <code>engineHoursComputed</code> is present
@property (nonatomic) BOOL engineHoursComputedPresent;
/// Engine Hours Computed - true if engineHours is computed, false if it’s from vehicle bus
@property (nonatomic) BOOL engineHoursComputed;
/// Indicates if the <code>currentGear</code> is present
@property (nonatomic) BOOL currentGearPresent;
/// Current Gear - 0 to 31
@property (nonatomic) uint8_t currentGear;
/// Indicates if the <code>seatbeltOn</code> is present
@property (nonatomic) BOOL seatbeltOnPresent;
/// Seatbelt On - true if seatbelt is on, false if it’s off
@property (nonatomic) BOOL seatbeltOn;
/// Indicates if the <code>speed</code> is present
@property (nonatomic) BOOL speedPresent;
/// Speed - 0 to 255 km/h
@property (nonatomic) uint8_t speed;
/// Indicates if the <code>rpm</code> is present
@property (nonatomic) BOOL rpmPresent;
/// RPM - 0 to 8160 RPM
@property (nonatomic) uint16_t rpm;
/// Indicates if the <code>numberOfDTCPending</code> is present
@property (nonatomic) BOOL numberOfDTCPendingPresent;
/// Number of DTC pending
@property (nonatomic) uint8_t numberOfDTCPending;
/// Indicates if the <code>oilPressure</code> is present
@property (nonatomic) BOOL oilPressurePresent;
/// Oil Pressure - 0 to 1000 kPa
@property (nonatomic) uint16_t oilPressure;
/// Indicates if the <code>oilLevel</code> is present
@property (nonatomic) BOOL oilLevelPresent;
/// Oil Level - 0% to 100%
@property (nonatomic) double oilLevel;
/// Indicates if the <code>oilTemperature</code> is present
@property (nonatomic) BOOL oilTemperaturePresent;
/// Oil Temperature - -40C to 215C
@property (nonatomic) int16_t oilTemperature;
/// Indicates if the <code>coolantLevel</code> is present
@property (nonatomic) BOOL coolantLevelPresent;
/// Coolant Level - 0% to 100%
@property (nonatomic) double coolantLevel;
/// Indicates if the <code>coolantTemperature</code> is present
@property (nonatomic) BOOL coolantTemperaturePresent;
/// Coolant Temperature - -40C to 215C
@property (nonatomic) int16_t coolantTemperature;
/// Indicates if the <code>fuelLevel</code> is present
@property (nonatomic) BOOL fuelLevelPresent;
/// Fuel Level (Tank #1) - 0% to 100%
@property (nonatomic) double fuelLevel;
/// Indicates if the <code>DEFlevel</code> is present
@property (nonatomic) BOOL DEFlevelPresent;
/// DEF Level - 0% to 100%
@property (nonatomic) double DEFlevel;
/// Indicates if the <code>engineLoad</code> is present
@property (nonatomic) BOOL engineLoadPresent;
/// Engine Load - 0% to 250%
@property (nonatomic) double engineLoad;
/// Indicates if the <code>barometer</code> is present
@property (nonatomic) BOOL barometerPresent;
/// Barometer - 0 to 125 kPa
@property (nonatomic) double barometer;
/// Indicates if the <code>intakeManifoldTemperature</code> is present
@property (nonatomic) BOOL intakeManifoldTemperaturePresent;
/// Intake Manifold Temperature - -40C to 215C
@property (nonatomic) int16_t intakeManifoldTemperature;
/// Indicates if the <code>engineFuelTankTemperature</code> is present
@property (nonatomic) BOOL engineFuelTankTemperaturePresent;
/// Engine Fuel Temperature - -40C to 215C
@property (nonatomic) int16_t engineFuelTankTemperature;
/// Indicates if the <code>engineIntercoolerTemperature</code> is present
@property (nonatomic) BOOL engineIntercoolerTemperaturePresent;
/// Engine Intercooler Temperature - -40C to 215C
@property (nonatomic) int16_t engineIntercoolerTemperature;
/// Indicates if the <code>engineTurboOilTemperature</code> is present
@property (nonatomic) BOOL engineTurboOilTemperaturePresent;
/// Engine Turbo Oil Temperature - -40C to 215C
@property (nonatomic) int16_t engineTurboOilTemperature;
/// Indicates if the <code>transmisionOilTemperature</code> is present
@property (nonatomic) BOOL transmisionOilTemperaturePresent;
/// Transmision Oil Temperature - -40C to 215C
@property (nonatomic) int16_t transmisionOilTemperature;
/// Indicates if the <code>fuelLevel2</code> is present
@property (nonatomic) BOOL fuelLevel2Present;
/// Fuel Level Tank #2 - 0% to 100%
@property (nonatomic) double fuelLevel2;
/// Indicates if the <code>fuelRate</code> is present
@property (nonatomic) BOOL fuelRatePresent;
/// Fuel Rate - 0 to 3212.75 L/h
@property (nonatomic) double fuelRate;
/// Indicates if the <code>averageFuelEconomy</code> is present
@property (nonatomic) BOOL averageFuelEconomyPresent;
/// Average Fuel Economy - 0 to 125.498046875 km/L
@property (nonatomic) double averageFuelEconomy;
/// Indicates if the <code>ambientAirTemperature</code> is present
@property (nonatomic) BOOL ambientAirTemperaturePresent;
/// Ambient Air Temperature - -273 to 1734.96875C
@property (nonatomic) double ambientAirTemperature;
/// Indicates if the <code>odometer</code> is present
@property (nonatomic) BOOL odometerPresent;
/// Odometer - 0 to 421,108,121.5 km
@property (nonatomic) double odometer;
/// Indicates if the <code>engineHours</code> is present
@property (nonatomic) BOOL engineHoursPresent;
/// Engine Hours - 0 to 210,554,060.75 hr
@property (nonatomic) double engineHours;
/// Indicates if the <code>idleHours</code> is present
@property (nonatomic) BOOL idleHoursPresent;
/// Idle Hours - 0 to 210,554,060.75 hr
@property (nonatomic) double idleHours;
/// Indicates if the <code>PTOHours</code> is present
@property (nonatomic) BOOL PTOHoursPresent;
/// PTO Hours - 0 to 210,554,060.75 hr
@property (nonatomic) double PTOHours;
/// Indicates if the <code>totalIdleFuel</code> is present
@property (nonatomic) BOOL totalIdleFuelPresent;
/// totalIdleFuel - 0 to 2,105,54,607.5 L
@property (nonatomic) double totalIdleFuel;
/// Indicates if the <code>totalFuelUsed</code> is present
@property (nonatomic) BOOL totalFuelUsedPresent;
/// totalFuelUsed -  0 to 2,105,54,607.5 L
@property (nonatomic) double totalFuelUsed;
/// Indicates if the <code>vin</code> is present
@property (nonatomic) BOOL vinPresent;
/// VIN - ASCII representation
@property (nonatomic, copy) NSString * _Nonnull vin;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Virtual Dashboard Report
SWIFT_CLASS("_TtC12PacificTrack22VirtualDashboardReport")
@interface VirtualDashboardReport : ControlFrame
/// Report Number
@property (nonatomic, readonly) NSUInteger reportNumber;
/// Virtual Dashboard Data Unwrapped (intended for Objective-C)
@property (nonatomic, readonly, strong) VirtualDashboardDataUnwrapped * _Nonnull virtualDashboardDataUnwrapped;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
